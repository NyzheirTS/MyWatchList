private final Deque<WeakReference<Node>> backHistory = new ArrayDeque<>();
    private final Deque<WeakReference<Node>> forwardHistory = new ArrayDeque<>();
    private final BorderPane mainPane;
    private final Button backButton;
    private final Button forwardButton;

    public PageHistoryManager(BorderPane mainPane, Button backButton, Button forwardButton) {
        this.mainPane = mainPane;
        this.backButton = backButton;
        this.forwardButton = forwardButton;
        updateButtonStates();
    }

    //TODO: look into serializing node to better filter them
    public void navigateTo(Node page) {
        Node lastPage = mainPane.getCenter();
        if (lastPage != null && lastPage != page) {
            backHistory.push(new WeakReference<>(lastPage));
        }
        forwardHistory.clear();
        setCenterPage(page);
        System.out.println("Back History: " + backHistory);
        System.out.println("Forward History: " + forwardHistory);
    }

    public void goBack() {
        if (!backHistory.isEmpty()) {
            WeakReference<Node> previousPageRef = backHistory.pop();
            Node previousPage = previousPageRef.get();
            if (previousPage != null) {
                if (mainPane.getCenter() != null) {
                    forwardHistory.push(new WeakReference<>(mainPane.getCenter()));
                }
                setCenterPage(previousPage);
            } else {
                // Handle the case where the previous page was garbage collected
                System.out.println("Previous page was garbage collected");
            }
        }
        logHistory();
    }

    public void goForward() {
        if (!forwardHistory.isEmpty()) {
            WeakReference<Node> nextPageRef = forwardHistory.pop();
            Node nextPage = nextPageRef.get();
            if (nextPage != null) {
                if (mainPane.getCenter() != null) {
                    backHistory.push(new WeakReference<>(mainPane.getCenter()));
                }
                setCenterPage(nextPage);
            } else {
                // Handle the case where the next page was garbage collected
                System.out.println("Next page was garbage collected");
            }
        }
        logHistory();
    }


    private void setCenterPage(Node page) {
        Platform.runLater(() -> {
            mainPane.setCenter(page);
            updateButtonStates();
        });
    }

    private void updateButtonStates() {
        backButton.setDisable(backHistory.isEmpty());
        forwardButton.setDisable(forwardHistory.isEmpty());
    }
    private void logHistory() {
        System.out.println("Back History: " + backHistory);
        System.out.println("Forward History: " + forwardHistory);
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





    public class PageHistoryManager {
        private final Deque<WeakReference<Node>> backHistory = new ArrayDeque<>();
        private final Deque<WeakReference<Node>> forwardHistory = new ArrayDeque<>();
        private Node immediateBackPage = null; // Strong reference for immediate back navigation
        private Node immediateForwardPage = null; // Strong reference for immediate forward navigation
        private final BorderPane mainPane;
        private final Button backButton;
        private final Button forwardButton;

        public PageHistoryManager(BorderPane mainPane, Button backButton, Button forwardButton) {
            this.mainPane = mainPane;
            this.backButton = backButton;
            this.forwardButton = forwardButton;
            updateButtonStates();
        }

        public void navigateTo(Node page) {
            Node lastPage = mainPane.getCenter();
            if (lastPage != null && lastPage != page) {
                backHistory.push(new WeakReference<>(lastPage));
                immediateBackPage = lastPage; // Update strong reference for back navigation
            }
            forwardHistory.clear();
            immediateForwardPage = null; // Clear forward navigation reference
            setCenterPage(page);
            logHistory();
        }

        public void goBack() {
            if (!backHistory.isEmpty()) {
                Node currentPage = mainPane.getCenter();
                if (currentPage != null) {
                    forwardHistory.push(new WeakReference<>(currentPage));
                    immediateForwardPage = currentPage; // Update strong reference for forward navigation
                }

                WeakReference<Node> previousPageRef = backHistory.pop();
                Node previousPage = previousPageRef.get();
                if (previousPage != null) {
                    setCenterPage(previousPage);
                    immediateBackPage = !backHistory.isEmpty() ? backHistory.peek().get() : null; // Update back navigation reference
                } else {
                    System.out.println("Previous page was garbage collected");
                }
            }
            logHistory();
        }

        public void goForward() {
            if (!forwardHistory.isEmpty()) {
                Node currentPage = mainPane.getCenter();
                if (currentPage != null) {
                    backHistory.push(new WeakReference<>(currentPage));
                    immediateBackPage = currentPage; // Update strong reference for back navigation
                }

                WeakReference<Node> nextPageRef = forwardHistory.pop();
                Node nextPage = nextPageRef.get();
                if (nextPage != null) {
                    setCenterPage(nextPage);
                    immediateForwardPage = !forwardHistory.isEmpty() ? forwardHistory.peek().get() : null; // Update forward navigation reference
                } else {
                    System.out.println("Next page was garbage collected");
                }
            }
            logHistory();
        }

        private void setCenterPage(Node page) {
            Platform.runLater(() -> {
                mainPane.setCenter(page);
                updateButtonStates();
            });
        }

        private void updateButtonStates() {
            backButton.setDisable(backHistory.isEmpty());
            forwardButton.setDisable(forwardHistory.isEmpty());
        }

        private void logHistory() {
            System.out.println("Back History: " + backHistory);
            System.out.println("Forward History: " + forwardHistory);
        }

    }